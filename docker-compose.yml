services:
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=companydb;Username=postgres;Password=yourpassword123
      - IdentityServer__Authority=http://auth:8080
      - Frontend__ClientUrl=http://localhost:8081
    depends_on:
      db:
        condition: service_healthy
      auth:
        condition: service_healthy
    networks:
      - app-network

  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports: 
      - "8083:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=companydb;Username=postgres;Password=yourpassword123
      - Auth__IssuerUri=http://auth:8080
      - Frontend__ClientUrl=http://localhost:8081
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network

  frontend:
    build:
      context: ./client  
      dockerfile: Dockerfile
    ports:
      - "8081:80"
    environment:
      - ApiUrl=http://localhost:8080
    networks:
      - app-network
    depends_on:
      api:
        condition: service_started

  db:
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=yourpassword123
      - POSTGRES_DB=companydb
    ports:
      - "8082:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
